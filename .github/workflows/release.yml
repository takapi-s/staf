name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 0.1.0)'
        required: true

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm ci

      - name: Get version from tag
        id: version
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "push") {
            $VERSION = "${{ github.ref }}" -replace "refs/tags/v", ""
          } else {
            $VERSION = "${{ github.event.inputs.version }}"
          }
          "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Update version files
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          
          # package.json - JSONとして安全に更新
          $packageJson = Get-Content package.json -Raw | ConvertFrom-Json
          $packageJson.version = $version
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content package.json -Encoding UTF8
          
          # src-tauri/Cargo.toml - より具体的な正規表現で置換
          $cargoToml = Get-Content src-tauri/Cargo.toml -Raw
          $cargoToml = $cargoToml -replace '^version = "[^"]*"', "version = `"$version`""
          Set-Content src-tauri/Cargo.toml -Value $cargoToml -Encoding UTF8
          
          # src-tauri/tauri.conf.json - JSONとして安全に処理
          $tauriConfig = Get-Content src-tauri/tauri.conf.json -Raw | ConvertFrom-Json
          $tauriConfig.version = $version
          $tauriConfig | ConvertTo-Json -Depth 10 | Set-Content src-tauri/tauri.conf.json -Encoding UTF8

      - name: Build application
        run: npm run tauri:build

      - name: Sign installer
        shell: pwsh
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
        run: |
          $ErrorActionPreference = "Stop"
          
          if (-not $env:TAURI_PRIVATE_KEY) {
            Write-Error "TAURI_PRIVATE_KEY is required but not set"
            exit 1
          }
          
          $installerPath = ".\src-tauri\target\release\bundle\nsis\STAF_${{ steps.version.outputs.version }}_x64-setup.exe"
          if (-not (Test-Path $installerPath)) {
            Write-Error "Installer not found: $installerPath"
            exit 1
          }

          Write-Host "Signing installer: $installerPath"
          if ($env:TAURI_PRIVATE_KEY_PASSWORD) {
            npx @tauri-apps/cli signer sign --private-key "$env:TAURI_PRIVATE_KEY" --password "$env:TAURI_PRIVATE_KEY_PASSWORD" $installerPath
          } else {
            npx @tauri-apps/cli signer sign --private-key "$env:TAURI_PRIVATE_KEY" $installerPath
          }

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Signing failed with exit code $LASTEXITCODE"
            exit 1
          }
          Write-Host "Signing completed successfully"

      - name: Read signature
        id: signature
        shell: pwsh
        run: |
          $sigFile = ".\src-tauri\target\release\bundle\nsis\STAF_${{ steps.version.outputs.version }}_x64-setup.exe.sig"
          if (-not (Test-Path $sigFile)) {
            Write-Error "Signature file not found: $sigFile"
            exit 1
          }
          
          $sig = Get-Content $sigFile -Raw
          $sig = $sig -replace "`r`n", "" -replace "`n", ""
          "signature=$sig" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Generate updater.json
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $signature = "${{ steps.signature.outputs.signature }}"
          $repository = "${{ github.repository }}"
          
          if (-not $signature) {
            Write-Error "Signature is empty, cannot generate updater.json"
            exit 1
          }
          
          $pubDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          
          $json = @{
            version = $version
            notes = "STAF v$version"
            pub_date = $pubDate
            platforms = @{
              "windows-x86_64" = @{
                signature = $signature
                url = "https://github.com/$repository/releases/download/v$version/STAF_$version`_x64-setup.exe"
              }
            }
          } | ConvertTo-Json -Depth 10
          
          Set-Content -Path updater.json -Value $json -Encoding UTF8

      - name: Commit updater.json
        shell: pwsh
        run: |
          # detached HEAD で走る可能性があるため main を明示的に取得・チェックアウト
          git fetch origin main --depth=1
          git checkout -B main origin/main

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add updater.json
          git commit -m "Update updater.json for v${{ steps.version.outputs.version }}"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "No changes to commit."
          } else {
            git push origin main
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to push to main"
              exit 1
            }
          }

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: STAF v${{ steps.version.outputs.version }}
          body: |
            ## STAF v${{ steps.version.outputs.version }}
            
            ### インストール方法
            - 下の「STAF_${{ steps.version.outputs.version }}_x64-setup.exe」をダウンロード
            - ダブルクリックしてインストール
            
            ### 自動更新
            アプリ内の「更新を確認」ボタンから自動更新が可能です。
          files: |
            src-tauri/target/release/bundle/nsis/STAF_${{ steps.version.outputs.version }}_x64-setup.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
